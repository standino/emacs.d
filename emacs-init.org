   - [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org][一年成为Emacs高手(像神一样使用编辑器)]]
   - http://emacslife.com/

* Description
  This file is tangled using =org-babel-load-file=. What this does is generate
  a =emacs-init.el= from the =emacs-lisp= source blocks.

  This emacs.d is currently  designed for Emacs 24.3 and above.

* 常用操作
** Common 
 -  M-./ C-Mg : 获得Java变量和方法的引用或声明
 -  M-x swoop-multi : 在打开的 buffer 查找某个关键字
 -  C-cpg: 在项目中查找字段
 -  C-ci或S-M t或M-x helm-imenu: 查看当前文件的结构
 - C-cf : 打开文件

** textmate 

#+BEGIN_SRC
;;    ⌘T - Go to File
;;  ⇧⌘T - Go to Symbol
;;    ⌘L - Go to Line
;;  ⇧⌘L - Select Line (or expand Selection to select lines)
;;    ⌘/ - Comment Line (or Selection/Region)
;;    ⌘] - Shift Right (currently indents region)
;;    ⌘[ - Shift Left  (not yet implemented)
;;  ⌥⌘] - Align Assignments
;;  ⌥⌘[ - Indent Line
;;    ⌥↑ - Column Up
;;    ⌥↓ - Column Down
;;  ⌘RET - Insert Newline at Line's End
;;  ⌥⌘T - Reset File Cache (for Go to File)

#+END_SRC

** malabar
   - https://github.com/m0smith/malabar-mode/blob/develop/src/main/lisp/malabar-cheatsheet.org
* 初始化

#+BEGIN_SRC
(require 'ob-tangle)
(org-babel-load-file
 (expand-file-name "emacs-init.org"
                   user-emacs-directory))
(org-agenda nil  "a")
(provide 'init-local)
#+END_SRC

* 快捷键设置
#+BEGIN_SRC emacs-lisp
;;; Hotkey options
(defalias 'tt 'toggle-truncate-lines)
(defalias 'yas  'yas/expand)
(defalias 'sql-org-table 'org-table-create-or-convert-from-region)
(defalias 'sql-org-next  'orgtbl-tab)
(global-set-key "\C-z" 'set-mark-command)
(global-set-key (kbd "C-c t") 'org-table-create-or-convert-from-region)
(global-set-key (kbd "C-c n") 'orgtbl-tab)

(global-set-key "\C-o" 'scroll-down)
;;(global-set-key "\C-i" 'my-tab)
(global-set-key [(f3)] 'dired)
(global-set-key [(f4)] 'eshell)
(global-set-key [(f8)] 'highlight-symbol-at-point)

(global-set-key (kbd "<f9>") 'list-bookmarks)
(global-set-key [(f10)] 'bookmark-set)

;;(global-set-key [(f11)] 'fullscreen)

;;(define-key global-map (kbd "C-c f") 'wy-go-to-char)
;;(define-key global-map (kbd "C-c b") 'my-back-to-char)
;;
;;(global-set-key [(control ?\.)] 'ska-point-to-register)
;;(global-set-key [(control ?\,)] 'ska-jump-to-register)
;;(global-set-key (kbd "M-X") 'anything)
;;
;;(keyboard-translate ?\C-h ?\C-?)
;;(global-set-key (kbd "M-8") 'extend-selection)
;;(global-set-key (kbd "M-*") 'select-text-in-quote)

#+END_SRC
** Java 开发快捷键
#+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(define-key c-mode-base-map (kbd "<f2>") 'eclim-problems)
(define-key c-mode-base-map "\C-\M-g" 'eclim-java-find-declaration)
(define-key c-mode-base-map "\C-\M-o" 'eclim-java-import-organize)
(define-key c-mode-base-map "\C-q" 'eclim-java-show-documentation-for-current-element)
(define-key c-mode-base-map "\M-i" 'eclim-java-implement) ;; IDEA is C-i
(define-key c-mode-base-map (kbd "<M-RET>") 'eclim-problems-correct)
(define-key c-mode-base-map (kbd "<M-f7>") 'eclim-java-find-references)
(define-key c-mode-base-map (kbd "<S-f6>") 'eclim-java-refactor-rename-symbol-at-point)
(define-key c-mode-base-map (kbd "<S-f7>") 'gtags-find-tag-from-here)

#+END_SRC

** 书签操作：

  | C-x r m Bookmark | bookmark-set         | 设置一个名为 Bookmark 的书签。              |
  | C-x r l          | bookmarks-bmenu-list | 列出所有已保存的书签。                      |
  |                  | bookmark-delete      | 删除一个书签。                              |
  | C-x r b Bookmark | bookmark-jump        | 跳转至名为 Bookmark 的书签中所设置的位置。  |
  |                  | bookmark-save        | 将所有的书签保存到书签文件 ~/.emac.bmk 中。 |

* 设置路径

#+BEGIN_SRC emacs-lisp

;;; package --- 设置路径
;;; code

(setq my-idea-home "~/ideas/")
(setq my-emacs-home "~/ideas/emacs/")
(add-to-list 'load-path (concat my-emacs-home "lib"))

(defun cw/open-host-file ()
   (interactive)
   (find-file (concat "/cygdrive/c/Windows/System32/drivers/etc/"  "hosts"))
 )

(require 'require-or-install)

(defun my-require-or-install (feature)
  (require-or-install feature  (format "%s.el" feature) )
  )

(defun my-require (feature)
  " put the ~/.emacs.d/$feature to path"
    (add-to-list 'load-path  (format "~/.emacs.d/%s"   feature) )
  (my-require-or-install feature)
)

(require 'wc)



#+END_SRC



* Org

** 常用配置，大部分来自 sacha
#+BEGIN_SRC emacs-lisp

(defun sacha/org-agenda-clock (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (org-dblock-write:clocktable
     `(:scope agenda
              :maxlevel 8
              :block today
              :formula %
              :compact t
              :narrow 150!
              ))))

(defun cw/org-agenda-clock (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (org-dblock-write:clocktable
     `(:scope agenda
              :maxlevel 8
              :block today
              :compact t
              :narrow 150!
              ))))

(defun cw/org-agenda-clock-daily-report (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (org-dblock-write:clocktable
     `(:scope agenda
       :maxlevel 8
       :block today

       ))))
(defun cw/org-agenda-clock-thisweek (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (org-dblock-write:clocktable
     `(:scope agenda
       :maxlevel 8
           :block thisweek
           :formula %
           :compact t
           :narrow 150!
;;           :link t
       ))))

(defun cw/org-agenda-clock-lastweek (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (insert  "\n\nTasks done in this week: \n")
    (org-dblock-write:clocktable
     `(:scope agenda
       :maxlevel 8
           :block lastweek
           :formula %
           :compact t
           :narrow 150!
;;           :link t
       ))))

(defun cw/org-agenda-clock-thismonth (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (insert  "\n\nTasks done in this month: \n")
    (org-dblock-write:clocktable
     `(:scope agenda
       :maxlevel 8
           :block thismonth
           :formula %
           :compact t
           :narrow 150!
;;           :link t
       ))))
(defun cw/org-agenda-clock-thisyear (match)
  ;; Find out when today is
  (let* ((inhibit-read-only t))
    (goto-char (point-max))
    (insert  "\n\nTasks done in this year: \n")
    (org-dblock-write:clocktable
     `(:scope agenda
       :maxlevel 8
           :block thisyear
           :formula %
           :compact t
           :narrow 150!
;;           :link t
       ))))

;; Change your existing org-agenda-custom-commands
(setq org-agenda-custom-commands
      '(("a" "My custom agenda"
         (
          (sacha/org-agenda-clock)
          (todo "OKTODAY" )
          (todo "STARTED")

          (org-agenda-list nil nil 1)
;;          (sacha/org-agenda-load)
          (todo "WAITING")
          (todo "DELEGATED" )

          (todo "TODO")
          (tags "PROJECT")
;;          (tags "PROJECT-WAITING")
          (todo "MAYBE")
          )
         )
        ("d" "delegated"
         ((todo "DELEGATED" ))
         )
        ("c" "finished tasks"
         ((todo "DONE" )
          (todo "DEFERRED" )
          (todo "CANCELLED" )
          )
         )
        ("w" "waiting"
         ((todo "WAITING" ))
         )
        ("o" "overview"
         ((todo "WAITING" )
          (cw/org-agenda-clock-daily-report)
          (cw/org-agenda-clock-thisweek)
          (cw/org-agenda-clock-thismonth)
          (cw/org-agenda-clock-thisyear)
          )
         )
        ("x" "Weekly schedule" agenda ""
         ((org-agenda-ndays 7)          ;; agenda will start in week view
          (org-agenda-repeating-timestamp-show-all nil)   ;; ensures that repeating events appear on all relevant dates
          (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
        ("A" "priority A"
         ((tags "//#A" ))
         )
        ("T" todo-tree "TODO")
        ("W" todo-tree "WAITING")
        ("u" "Unscheduled" ((sacha/org-agenda-list-unscheduled)))
        ("v" tags-todo "+BOSS-URGENT")
        ("U" tags-tree "+BOSS-URGENT")
        ("f" occur-tree "\\<FIXME\\>")
        )
      )


;;; GTD 提醒

(defun sacha/org-clock-in-if-starting ()
  "Clock in when the task is marked STARTED."
  (when  (string= org-state "STARTED")
    (org-clock-in)
;;    (org-pomodoro)
))

(add-hook 'org-after-todo-state-change-hook
          'sacha/org-clock-in-if-starting)

(defadvice org-clock-in (after sacha activate)
  "Set this task's status to 'STARTED'."
  (org-todo "STARTED"))

(defun sacha/org-clock-out-if-waiting ()
  "Clock in when the task is marked STARTED."
  (when  (string= org-state "WAITING")
    (org-clock-out)))
(add-hook 'org-after-todo-state-change-hook
          'sacha/org-clock-out-if-waiting)

(defun sacha/org-clock-out-if-oktoday ()
  "clock out  when the task is marked OKTODAY."
  (when (string= org-state "OKTODAY")
    (org-clock-out)))
(add-hook 'org-after-todo-state-change-hook
          'sacha/org-clock-out-if-oktoday)

;; Pomodoro and org-mode

(add-to-list 'org-modules' org-timer)
(setq org-timer-default-timer 25)
(add-hook 'org-clock-in-hook' (lambda ()
       (if (not org-timer-current-timer)
       (org-timer-set-timer '(16)))))
(add-hook 'org-clock-out-hook' (lambda ()
       (setq org-mode-line-string nil)
))
(add-hook 'org-timer-done-hook 'have-a-rest)


(defun have-a-rest ()
  "alert a have a rest msg"
  (interactive)
  (shell-command (concat zendisp
                  " --text='"
                  "休息一下吧。"
                  "'"
                  ))
;;  (express-message-popup  "It really is time to take a break")
  ;;(org-timer-set-timer 5)
;;  (setq org-mode-line-string "休息中...")
)


(setq org-agenda-span 'day)

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

(define-key global-map "\C-cr"
  (lambda () (interactive) (org-capture nil "m")))
(define-key global-map "\C-cd"
  (lambda () (interactive) (org-capture nil "d")))

(global-set-key (kbd "<f12>") (lambda () (interactive)(switch-to-buffer "*Org Agenda*")(org-agenda-redo)))



;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file (concat my-idea-home "org/mygtd.org"))
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file (concat my-idea-home "org/mygtd.org"))
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file (concat my-idea-home "org/mygtd.org"))
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file (concat my-idea-home "org/mygtd.org"))
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file+headline (concat my-idea-home "org/mygtd.org") "Meeting")
               "* [#A] [/]   %?  SCHEDULED:%t   :MEETING:\n%U" )
              ("p" "Phone call" entry (file (concat my-idea-home "org/mygtd.org"))
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("d" "Development" entry (file+headline (concat my-idea-home "org/mygtd.org") "Development")
               "* TODO [#A] [/] %? %u SCHEDULED:%t:OFFICE:\n" )
              ("h" "Habit" entry (file (concat my-idea-home "org/mygtd.org"))
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

;;http://doc.norang.ca/org-mode.html
;;18.38 Remove Multiple State Change Log Details From The Agenda
;;I skip multiple timestamps for the same entry in the agenda view with the following setting.

(setq org-agenda-skip-additional-timestamps-same-entry t)

(require 'org-crypt)
; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
; GPG key to use for encryption
(setq org-crypt-key "F0B66B40")


;;Enable Auto Fill mode
(defun my-org-mode-hook ()

(setq-default fill-column 130)
(auto-fill-mode 1))

(add-hook 'org-mode-hook 'my-org-mode-hook)

(defun cw/tasks-last-week ()
  "Produces an org agenda tags view list of all the tasks completed
last week."

  (interactive)
    (org-tags-view nil
          (concat

           (format-time-string "+CLOSED>=\"[%Y-%m-%d]\"" (time-subtract (current-time)
                                                  (seconds-to-time (* 7 24 60 60))))
           (format-time-string "+CLOSED<=\"[%Y-%m-%d]\""  (current-time)))))

(defun cw/tasks-last-month ()
  "Produces an org agenda tags view list of all the tasks completed
last month with the Category Foo."
  (interactive)
    (org-tags-view nil
          (concat
           (format-time-string "+CLOSED>=\"[%Y-%m-%d]\"" (time-subtract (current-time)
                                                  (seconds-to-time (* 30 24 60 60))))
           (format-time-string "+CLOSED<=\"[%Y-%m-%d]\""  (current-time)))))

(defun cw/tasks-last-year ()
  "Produces an org agenda tags view list of all the tasks completed
last month with the Category Foo."

  (interactive)
    (org-tags-view nil
          (concat

           (format-time-string "+CLOSED>=\"[%Y-%m-%d]\"" (time-subtract (current-time)
                                                  (seconds-to-time (* 365 24 60 60))))
           (format-time-string "+CLOSED<=\"[%Y-%m-%d]\""  (current-time)))))

#+END_SRC

**  Org 写 PPT
   - State "OKTODAY"    from "STARTED"    [2014-05-09 五 14:37]
   - State "OKTODAY"    from "STARTED"    [2014-05-07 三 19:12]
   :LOGBOOK:
   CLOCK: [2014-05-09 五 15:37]--[2014-05-09 五 16:04] =>  0:27
   CLOCK: [2014-05-09 五 14:09]--[2014-05-09 五 14:24] =>  0:15
   CLOCK: [2014-05-07 三 17:44]--[2014-05-07 三 19:12] =>  1:28
   :END:
 
  - http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html#sec-3
  - https://github.com/yjwen/org-reveal/blob/master/Readme.org  
*** beamer (停止使用)
ubuntu 上安装软件

#+BEGIN_SRC

sudo apt-get install texlive-xetex latex-beamer texlive-latex-extra

#+END_SRC

Emacs 配置
#+BEGIN_SRC emacs-lisp

;;; writing presentation

;; {{ export org-mode in Chinese into PDF
;; @see http://freizl.github.io/posts/tech/2012-04-06-export-orgmode-file-in-Chinese.html
;; and you need install texlive-xetex on different platforms
;; To install texlive-xetex:
;;    `sudo USE="cjk" emerge texlive-xetex` on Gentoo Linux
(setq org-latex-to-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))

  ;; Install a default set-up for Beamer export.
(require 'org-install)
(require 'org-latex)

(require 'ox-beamer)
  (unless (assoc "beamer-cn" org-latex-classes)
  (add-to-list 'org-latex-classes
               '("beamer-cn"
                 "\\documentclass[presentation]{beamer}
\\usepackage{xeCJK}
\\setCJKmainfont{SimSun}
\[DEFAULT-PACKAGES]
\[PACKAGES]
\[EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))


;; }}
#+END_SRC


*** ox-reveal

  - 安装文档： https://github.com/yjwen/org-reveal/blob/master/Readme.org

下载 reveal 
#+BEGIN_SRC 
 git clone https://github.com/hakimel/reveal.js.git

 mv reveal.js to the org file folder 
#+END_SRC

#+BEGIN_SRC emacs-lisp

(require-package 'ox-reveal)

#+END_SRC

 “C-c C-e R R” : 导出html 文件

To wake-up Org-reveal now, type “M-x load-library”, then type “ox-reveal”.

Now you can export this manual into Reveal.js presentation by typing “C-c C-e R R”.

Open the generated “Readme.html” in your browser and enjoy the cool slides.


具体编写出的演示文档，可以参考 [[https://github.com/yjwen/org-reveal/blob/master/Readme.org][这个例子]]

** Org 写文档和记笔记

  - [[http://orgmode.org/manual/JavaScript-support.html][Exporting org-mode documents to HTML offers 3 styles]]

#+BEGIN_SRC emacs-lisp
(require-package 'org-page)
(setq op/site-main-title "Keep going")
(setq op/site-sub-title "努力超越自己！")
(setq op/site-domain "http://standino.github.io/")
(setq op/personal-github-link "https://github.com/standino")
(setq op/personal-disqus-shortname "standino")
(setq op/personal-google-analytics-id "UA-46515756-1")
(setq op/repository-org-branch "master")  ;; default is "source"
(setq op/repository-html-branch "master") ;; default is "master"
(setq op/category-config-alist
      '(("blog" ;; this is the default configuration
         :show-meta t
         :show-comment t
         :uri-generator op/generate-uri
         :uri-template "/blog/%y/%m/%d/%t/"
         :sort-by :date       ;; how to sort the posts
         :category-index t)   ;; generate category index or not
        ("wiki"
         :show-meta t
         :show-comment t
         :uri-generator op/generate-uri
         :uri-template "/wiki/%t/"
         :sort-by :mod-date
         :category-index t)
        ("index"
         :show-meta nil
         :show-comment nil
         :uri-generator op/generate-uri
         :uri-template "/"
         :sort-by :date
         :category-index nil)
        ("about"
         :show-meta nil
         :show-comment nil
         :uri-generator op/generate-uri
         :uri-template "/about/"
         :sort-by :date
         :category-index nil)))

(defun cw/commit-pub ()
    (shell-command  "st ci")
    (op/do-publication t nil nil t)
  )
(defun cw/pub-blog-git ()
  (interactive)
  (setq op/repository-directory (concat my-idea-home "standino.github.com") )
  (cw/commit-pub)
 ;; (op/do-publication)
  )
(defun cw/pub-notes-local ()
  (interactive)
  (setq op/repository-directory (concat my-idea-home "orgpage") )
  (cw/commit-pub)
;;  (op/do-publication)
)

(defun cw/pub-all ()
  (interactive)
  (cw/pub-notes-local)
  (cw/pub-blog-git)
 ;; (shell-command  "st site")

  )
#+END_SRC

*** 设置自己的的主题

#+BEGIN_SRC emacs-lisp
(setq op/theme-root-directory "~/.emacs.d/themes")
(setq op/theme 'my)
#+END_SRC

* 常用函数

** 去除重复行

Lisp commands removing consecutive duplicates

The command ‘M-x uniquify-buffer-lines’ will remove identical adjacent lines in the current buffer, similar to what is obtained
with the unix uniq command.

#+BEGIN_SRC emacs-lisp
 (defun uniquify-region-lines (beg end)
    "Remove duplicate adjacent lines in region."
    (interactive "*r")
    (save-excursion
      (goto-char beg)
      (while (re-search-forward "^\\(.*\n\\)\\1+" end t)
        (replace-match "\\1"))))

  (defun uniquify-buffer-lines ()
    "Remove duplicate adjacent lines in the current buffer."
    (interactive)
    (uniquify-region-lines (point-min) (point-max)))
#+END_SRC

It is important to note that functions which find duplicate lines don’t always sort lines before looking for dups as this may or may not be what one expects or desires of a particular function.

** Lisp command to retrieve duplicates
Where the lines of a file are presorted it can be convenient to use something like this:
#+BEGIN_SRC emacs-lisp

  (defun find-duplicate-lines (&optional insertp interp)
    (interactive "i\np")
    (let ((max-pon (line-number-at-pos (point-max)))
          (gather-dups))
      (while (< (line-number-at-pos) max-pon) (= (forward-line) 0)
             (let ((this-line (buffer-substring-no-properties (line-beginning-position 1) (line-end-position 1)))
                   (next-line (buffer-substring-no-properties (line-beginning-position 2) (line-end-position 2))))
               (when  (equal this-line next-line)  (setq gather-dups (cons this-line gather-dups)))))
      (if (or insertp interp)
          (save-excursion (new-line) (princ gather-dups (current-buffer)))
        gather-dups)))

#+END_SRC

This function, while inefficient (note cons in tail of while form) is quite handy for locating duplicates before removing them,
    i.e. situations of type: ‘uniquify-maybe’. Extend ‘find-duplicate-lines’ by comparing its result list with one or more of
    the list comparison procedures ‘set-difference’, ‘union’, ‘intersection’, etc. from the CL package (require ‘cl).

#+BEGIN_SRC emacs-lisp
(defun djcb-duplicate-line (&optional commentfirst)
  "comment line at point; if COMMENTFIRST is non-nil, comment the original"
  (interactive)
  (beginning-of-line)
  (push-mark)
  (end-of-line)
  (let ((str (buffer-substring (region-beginning) (region-end))))
    (when commentfirst
      (comment-region (region-beginning) (region-end)))
    (insert-string
     (concat (if (= 0 (forward-line 1)) "" "\n") str "\n"))
    (forward-line -1)))

;; or choose some better bindings....

;; duplicate a line
(global-set-key (kbd "C-c y") 'djcb-duplicate-line)

;; duplicate a line and comment the first
(global-set-key (kbd "C-c c") (lambda()(interactive)(djcb-duplicate-line t)))


;; 当backspace用
(keyboard-translate ?\C-h ?\C-?)

(defun cygwin-or-linux (cyg ln)
  "cyg is the function for cygwin, ln is the function for linux."
  (interactive)
  (if (equal system-type 'cygwin)
      (if cyg (funcall cyg))
    )
  (if (equal system-type 'windows-nt)
      (if cyg (funcall cyg))
    )
  (if (equal system-type 'gnu/linux)
      (if ln (funcall ln))
    )

  )

(defun cygwin-do (fn)
  " only run for cygwin"
  (interactive)
  (if (equal system-type 'cygwin)
      (if fn (funcall fn))
    )
  )

(defun win-do (fn)
  " only run for win"
  (interactive)
  (if (equal system-type 'windows-nt)
      (if fn (funcall fn))
    )
  )

(defun linux-do (fn)
  " only run for linux"
  (interactive)

  (if (equal system-type 'gnu/linux)
      (if fn (funcall fn))
    )

  )
;;上下分屏
;;(setq split-width-threshold most-positive-fixnum)

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (untabify-buffer)
  (delete-trailing-whitespace)
  (indent-buffer))

(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))
;;启动调试信息
;; (setq debug-on-error t)

#+END_SRC

* 提醒

在 org文件中设定的任务，到时会弹出框提醒

** 使用linux下的zentiy明来弹消息
#+BEGIN_SRC emacs-lisp

(defvar zendisp "zenity --info --title='Appointment' ")

(defun my-appt-disp-window (min-to-app new-time msg)
  (save-window-excursion
  (shell-command (concat zendisp
                  " --text='"
                  (string-replace-all "<" "[]" msg)
                  "'"
                  ))
    )
  )
#+END_SRC

** 获得org agenda 中的TODO，到时提醒

#+BEGIN_SRC emacs-lisp
;;;; Get appointments for today
(defun my-org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (let ((org-deadline-warning-days 0))    ;; will be automatic in org 5.23
    (org-agenda-to-appt)))

;; Run once, activate and schedule refresh
(my-org-agenda-to-appt)
(appt-activate t)
(run-at-time "24:01" nil 'my-org-agenda-to-appt)

(setq appt-issue-message t)
(setq appt-message-warning-time '1)
(setq appt-display-interval '1)

(setq org-deadline-warning-days '1)
; Update appt each time agenda opened.
(add-hook 'org-finalize-agenda-hook 'my-org-agenda-to-appt)

 ; Setup zenify, we tell appt to use window, and replace default function
(setq appt-display-format 'window)
(setq appt-disp-window-function (function my-appt-disp-window))

#+END_SRC


* 格式化xml 文件
  #+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.jsp\\'" . anjsp-mode))

(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do this.
  The function inserts linebreaks to separate tags that have nothing but whitespace between them. It then indents the markup by using nxml's indentation rules."
  (interactive "r")
  (save-excursion (nxml-mode) (goto-char begin)
                  (while (search-forward-regexp "\>[ \\t]*\<" nil t)
                    (backward-char) (insert "\n"))
                  (indent-region begin end))
(message "Ah, much better!"))

(defun msh-close-tag ()
  "Close the previously defined XML tag"
  (interactive)
  (let ((tag nil)
        (quote nil))
    (save-excursion
      (do ((skip 1))
          ((= 0 skip))
        (re-search-backward "</?[a-zA-Z0-9_-]+")
        (cond ((looking-at "</")
               (setq skip (+ skip 1)))
              ((not (looking-at "<[a-zA-Z0-9_-]+[^>]*?/>"))
               (setq skip (- skip 1)))))
      (when (looking-at "<\\([a-zA-Z0-9_-]+\\)")
        (setq tag (match-string 1)))
      (if (eq (get-text-property (point) 'face)
              'font-lock-string-face)
          (setq quote t)))
    (when tag
      (setq quote (and quote
                       (not (eq (get-text-property (- (point) 1) 'face)
                                'font-lock-string-face))))
      (if quote
          (insert "\""))
      (insert "</" tag ">")
      (if quote
          (insert "\"")))))


  #+END_SRC

* 设置路径
#+BEGIN_SRC emacs-lisp

(setq my-idea-home "~/ideas/")
(setq my-emacs-home "~/ideas/emacs/")
(add-to-list 'load-path (concat my-emacs-home "lib"))

(defun cw-win-open-host-file ()
   (interactive)
   (find-file (concat "/cygdrive/c/Windows/System32/drivers/etc/"  "hosts"))
 )

(require 'require-or-install)

(defun my-require-or-install (feature)
  (require-or-install feature  (format "%s.el" feature) )
 )

(defun my-require (feature)
  " put the ~/.emacs.d/$feature to path"
    (add-to-list 'load-path  (format "~/.emacs.d/%s"   feature) )
  (my-require-or-install feature)
)

(require 'wc)
#+END_SRC
* 操作文件
  #+BEGIN_SRC emacs-lisp
(defun set-clipboard-contents-from-string (str)
  "Copy the value of string STR into the clipboard."
  (let ((x-select-enable-clipboard t))
    (x-select-text str)))

(defun string-replace-all (old new big)
  "Replace all occurences of OLD string with NEW string in BIG sting."
  (do ((newlen (length new))
       (i (search old big)
          (search old big :start2 (+ i newlen))))
      ((null i) big)
    (setq big
          (concatenate 'string
                       (subseq big 0 i)
                       new
                       (subseq big (+ i (length old))))))
  )

(defun path-to-clipboard ()
  "Copy the current file's path to the clipboard.
     If the current buffer has no file, copy the buffer's default directory."
  (interactive)
  (let (
        (path  (expand-file-name (or (buffer-file-name) default-directory)))
        )
    (set-clipboard-contents-from-string path )
    (kill-new path)
    (message "%s" path)))


(defun win-path()
  (concat "C:\\dsw" (string-replace-all "/" "\\" (expand-file-name (or (buffer-file-name) default-directory))))
  )

(defun buffer-dir()
  (file-name-directory (expand-file-name (or (buffer-file-name) default-directory)))
  )

(defun kill-unmodified-buffers ()
  "Kill some buffers.  Asks the user whether to kill each one of them.
Non-interactively, if optional argument LIST is non-nil, it
specifies the list of buffers to kill, asking for approval for each one."
  (interactive)
  (setq list (buffer-list))
  (while list
    (let* ((buffer (car list))
           (name (buffer-name buffer)))
      (and name                         ; Can be nil for an indirect buffer
                                        ; if we killed the base buffer.
           (not (string-equal name ""))
           (/= (aref name 0) ?\s)
           (if (buffer-modified-p buffer)
               (message "")(kill-buffer buffer))
           ))
    (setq list (cdr list))))
(setq grep-files-aliases
      (quote (("asm" . "*.[sS]")
              ("c" . "*.c") ("cc" . "*.cc *.cxx *.cpp *.C *.CC *.c++")
              ("cchh" . "*.cc *.[ch]xx *.[ch]pp *.[CHh] *.CC *.HH *.[ch]++")
              ("hh" . "*.hxx *.hpp *.[Hh] *.HH *.h++")
              ("ch" . "*.[ch]")
               ("el" . "*.el")
               ("h" . "*.h")
               ("l" . "[Cc]hange[Ll]og*")
               ("m" . "[Mm]akefile*")
               ("tex" . "*.tex")
               ("texi" . "*.texi")
               (java . "*.java")
               (sql . "*.sql *.SQL")
               (xml . "*.xml"))))


  #+END_SRC

* 备份设置
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("" . "~/backup/emacs/backup")))
(setq-default make-backup-file t)
(setq make-backup-file t)
(setq make-backup-files t)
(setq version-control t)
(setq kept-old-versions 2)
(setq kept-new-versions 10)
(setq delete-old-versions t)
#+END_SRC
* 字典
#+BEGIN_SRC emacs-lisp
(require-package 'dic-lookup-w3m)
(require 'dic-lookup-w3m)
(require 'dic-lookup-w3m-zh)
#+END_SRC
* 通过数字选择窗口

  - C-x 0 : 关闭窗口，不是关闭buffer。
  - M-1: 选择第一个窗口。

#+BEGIN_SRC emacs-lisp

;; http://tapoueh.org/emacs/switch-window.html
(require 'switch-window)

;; move window
(require-package 'window-numbering)
(custom-set-faces '(window-numbering-face ((t (:foreground "DeepPink" :underline "DeepPink" :weight bold)))))
(window-numbering-mode 1)

;; buffer-move.el
(global-set-key (kbd "C-c C-b C-k")     'buf-move-up)
(global-set-key (kbd "C-c C-b C-j")   'buf-move-down)
(global-set-key (kbd "C-c C-b C-h")   'buf-move-left)
(global-set-key (kbd "C-c C-b C-l")  'buf-move-right)


#+END_SRC

* web开发

  1. https://github.com/fxbois/web-mode
  2. https://github.com/fgallina/multi-web-mode
  3. http://web-mode.org/

#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.vm\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))

(add-hook 'web-mode-hook
  '(lambda()
     (setq tab-width 4)
     (setq indent-tabs-mode nil)
     (setq c-basic-offset 4)
   ))

#+END_SRC
* 代码提示
 - C-c k : 模板插入。使用yasnippet定义的模板，输入模板简称，然后使用该快捷键插入预定义的模板。
#+BEGIN_SRC emacs-lisp
(dolist (mode '(magit-log-edit-mode
                log-edit-mode org-mode text-mode haml-mode
                git-commit-mode
                sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                html-mode nxml-mode sh-mode smarty-mode clojure-mode
                lisp-mode java-mode textile-mode markdown-mode tuareg-mode
                js3-mode css-mode less-css-mode sql-mode web-mode
                sql-interactive-mode org-mode
                inferior-emacs-lisp-mode))
  (add-to-list 'ac-modes mode))
(require-package 'dropdown-list)
(require-package 'yasnippet)
(require 'init-yasnippet)
(require-package 'go-snippets)
(require-package 'java-snippets)
;;(require-package 'yasnippet-bundle)

#+END_SRC
* 统计使用的快捷键频率
 use keyfreq-show to see how many times you used a command.

 #+BEGIN_SRC emacs-lisp
(require-package 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
 #+END_SRC

* 智能注释代码

`M-x evilnc-default-hotkeys` assigns hotkey `M-;` to `evilnc-comment-or-uncomment-lines`
`M-x evilnc-comment-or-uncomment-lines` comment or uncomment lines.
`M-x evilnc-comment-or-uncomment-to-the-line` will comment/uncomment from current line to
the specified line number. The line number is passed as parameter of the command.
For example, `C-u 99 evilnc-comment-or-uncomment-to-the-line` will comment code from
current line to line 99.

#+BEGIN_SRC emacs-lisp

(require-package 'evil-nerd-commenter)

#+END_SRC

* go 语言

** TODO [#C] http://yousefourabi.com/blog/2014/05/emacs-for-go/

** 配置从这个 [[https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/01.4.md][页面]]拷贝的。

#+BEGIN_SRC emacs-lisp

(require-package 'go-mode)
;; golang mode
(require 'go-mode-load)
(require-package 'go-autocomplete)
;; speedbar
;;(speedbar 1)
;;(speedbar-add-supported-extension ".go")
(add-hook
'go-mode-hook
'(lambda ()
    ;; gocode
    (auto-complete-mode 1)
    (setq ac-sources '(ac-source-go))
    ;; Imenu & Speedbar
    (setq imenu-generic-expression
        '(("type" "^type *\\([^ \t\n\r\f]*\\)" 1)
        ("func" "^func *\\(.*\\) {" 1)))
    (imenu-add-to-menubar "Index")
    ;; Outline mode
    (make-local-variable 'outline-regexp)
    (setq outline-regexp "//\\.\\|//[^\r\n\f][^\r\n\f]\\|pack\\|func\\|impo\\|cons\\|var.\\|type\\|\t\t*....")
    (outline-minor-mode 1)
    (local-set-key "\M-a" 'outline-previous-visible-heading)
    (local-set-key "\M-e" 'outline-next-visible-heading)
    ;; Menu bar
    (require 'easymenu)
    (defconst go-hooked-menu
        '("Go tools"
        ["Go run buffer" go t]
        ["Go reformat buffer" go-fmt-buffer t]
        ["Go check buffer" go-fix-buffer t]))
    (easy-menu-define
        go-added-menu
        (current-local-map)
        "Go tools"
        go-hooked-menu)

    ;; Other
    (setq show-trailing-whitespace t)
    ))
;; helper function
(defun go ()
    "run current buffer"
    (interactive)
    (compile (concat "go run " (buffer-file-name))))

;; helper function
(defun go-fmt-buffer ()
    "run gofmt on current buffer"
    (interactive)
    (if buffer-read-only
    (progn
        (ding)
        (message "Buffer is read only"))
    (let ((p (line-number-at-pos))
    (filename (buffer-file-name))
    (old-max-mini-window-height max-mini-window-height))
        (show-all)
        (if (get-buffer "*Go Reformat Errors*")
    (progn
        (delete-windows-on "*Go Reformat Errors*")
        (kill-buffer "*Go Reformat Errors*")))
        (setq max-mini-window-height 1)
        (if (= 0 (shell-command-on-region (point-min) (point-max) "gofmt" "*Go Reformat Output*" nil "*Go Reformat Errors*" t))
    (progn
        (erase-buffer)
        (insert-buffer-substring "*Go Reformat Output*")
        (goto-char (point-min))
        (forward-line (1- p)))
    (with-current-buffer "*Go Reformat Errors*"
    (progn
        (goto-char (point-min))
        (while (re-search-forward "<standard input>" nil t)
        (replace-match filename))
        (goto-char (point-min))
        (compilation-mode))))
        (setq max-mini-window-height old-max-mini-window-height)
        (delete-windows-on "*Go Reformat Output*")
        (kill-buffer "*Go Reformat Output*"))))
;; helper function
(defun go-fix-buffer ()
    "run gofix on current buffer"
    (interactive)
    (show-all)
    (shell-command-on-region (point-min) (point-max) "go tool fix -diff"))
#+END_SRC

* 邮件(mutt)

  1. http://docs.huihoo.com/homepage/shredderyin/mutt_frame.html
  2. http://heim.ifi.uio.no/~jani/mutt/muttemacs.html
  3. http://emacs-fu.blogspot.com/2009/01/e-mail-with-emacs-using-mutt.html
  4. http://upsilon.cc/~zack/blog/posts/2010/02/integrating_Mutt_with_Org-mode/

emacs-conf.sample :

#+BEGIN_SRC
;; standard org <-> remember stuff, RTFM
(require 'org-capture)
(require 'org-protocol)

(setq org-default-notes-file "~/org/gtd.org")

(setq org-capture-templates
      (quote
       (("m"
         "Mail"
         entry
         (file+headline "~/org/gtd.org" "Incoming")
         "* TODO %^{Title}\n\n  Source: %u, %c\n\n  %i"
         :empty-lines 1)
        ;; ... more templates here ...
        )))
;; ensure that emacsclient will show just the note to be edited when invoked
;; from Mutt, and that it will shut down emacsclient once finished;
;; fallback to legacy behavior when not invoked via org-protocol.
(add-hook 'org-capture-mode-hook 'delete-other-windows)
(setq my-org-protocol-flag nil)
(defadvice org-capture-finalize (after delete-frame-at-end activate)
  "Delete frame at remember finalization"
  (progn (if my-org-protocol-flag (delete-frame))
         (setq my-org-protocol-flag nil)))
(defadvice org-capture-kill (after delete-frame-at-end activate)
  "Delete frame at remember abort"
  (progn (if my-org-protocol-flag (delete-frame))
         (setq my-org-protocol-flag nil)))
(defadvice org-protocol-capture (before set-org-protocol-flag activate)
  (setq my-org-protocol-flag t))

(defun open-mail-in-mutt (message)
  "Open a mail message in Mutt, using an external terminal.

Message can be specified either by a path pointing inside a
Maildir, or by Message-ID."
  (interactive "MPath or Message-ID: ")
  (shell-command
   (format "gnome-terminal -e \"%s %s\""
           (substitute-in-file-name "$HOME/bin/mutt-open") message)))

;; add support for "mutt:ID" links
(org-add-link-type "mutt" 'open-mail-in-mutt)
#+END_SRC

mutt-conf.sample:

#+BEGIN_SRC
macro index \eR "|~/bin/remember-mail\n"
#+END_SRC

mutt-open
* Java
** eclimd
  - https://github.com/senny/emacs-eclim
  - http://www.skybert.net/emacs/java/

*** 安装eclimd

#+BEGIN_SRC

wget -c http://jaist.dl.sourceforge.net/project/eclim/eclim/2.3.4/eclim_2.3.4.jar? -O eclim_2.3.4.jar
java -Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=8087 -jar eclim_2.3.4.jar

## .eclimrc

osgi.instance.area.default=@user.home/JD/projects

# increase heap size
-Xmx256M

# increase perm gen size
-XX:PermSize=64m
-XX:MaxPermSize=128m

-XX:-UseCompressedOops

#+END_SRC

*** 设置emacs-eclim

#+BEGIN_SRC
(require 'eclim)
(global-eclim-mode)
(require 'eclimd)
;;(add-to-list 'auto-mode-alist '("\\.java\\'" . java-mode))
;;(add-to-list 'auto-mode-alist '("\\.java\\'" . eclim-mode))
(setq eclim-auto-save t
      eclimd-wait-for-process nil
      eclim-use-yasnippet t
      help-at-pt-display-when-idle t
      help-at-pt-timer-delay 0.1
)

(custom-set-variables
 '(eclim-eclipse-dirs '("/home/will/JD/tools/springsource/sts-3.4.0.RELEASE"))
 '(eclimd-default-workspace "/home/will/JD/projects/sone/branches" )
 '(eclim-executable "/home/will/JD/tools/springsource/sts-3.4.0.RELEASE/eclim" )
 '(eclimd-executable "/home/will/JD/tools/springsource/sts-3.4.0.RELEASE/eclimd" )
 )
(help-at-pt-set-timer)

(require 'company)
(require 'company-emacs-eclim)
(company-emacs-eclim-setup)
(global-company-mode t)

(require 'flymake)
(defun my-flymake-init ()
  (list "my-java-flymake-checks"
        (list (flymake-init-create-temp-buffer-copy
               'flymake-create-temp-with-folder-structure))))
(add-to-list 'flymake-allowed-file-name-masks
             '("\\.java$" my-flymake-init flymake-simple-cleanup))


(defun eclim-run-test ()
  (interactive)
  (if (not (string= major-mode "java-mode"))
    (message "Sorry cannot run current buffer."))
  (compile (concat eclim-executable " -command java_junit -p " eclim--project-name " -t " (eclim-package-and-class))))
#+END_SRC


** OKTODAY malabar-mode
   CLOSED: [2014-05-09 五 09:47]
   - State "OKTODAY"    from "OKTODAY"    [2014-05-09 五 16:04]
   - State "OKTODAY"    from "STARTED"    [2014-05-09 五 09:47]
   - State "OKTODAY"    from "STARTED"    [2014-05-09 五 09:05]
   :LOGBOOK:
   CLOCK: [2014-05-09 五 09:05]--[2014-05-09 五 09:11] =>  0:06
   CLOCK: [2014-05-09 五 09:00]--[2014-05-09 五 09:05] =>  0:05
   :END:
  - http://software-ninja-ninja.blogspot.com/2014/03/using-malabar-mode-to-auto-populate-new.html
  - https://github.com/m0smith/malabar-mode#Installation
  - http://www.skybert.net/emacs/using-malabar-for-java-development/
  -
*** 安装

#+BEGIN_SRC
cd

git clone https://github.com/m0smith/malabar-mode-jar.git
cd malabar-mode-jar/

mvn package -Pdevel

cd

git clone https://github.com/m0smith/malabar-mode.git

sudo apt-get install groovy

#+END_SRC  


*** 配置

#+BEGIN_SRC emacs-lisp

;; Or enable more if you wish
(setq semantic-default-submodes '(global-semantic-idle-scheduler-mode
                                  global-semanticdb-minor-mode
                                  global-semantic-idle-summary-mode
                                  global-semantic-mru-bookmark-mode))
(semantic-mode 1)
(add-to-list 'load-path "~/malabar-mode/src/main/lisp")
(require 'malabar-mode)
(setq malabar-groovy-lib-dir "~/malabar-mode-jar/target/lib")
(setq malabar-groovy-extra-classpath '("~/malabar-mode-jar/target/classes"))
(add-to-list 'auto-mode-alist '("\\.java\\'" . malabar-mode))

(add-hook 'malabar-mode-hook
     (lambda () 
       (add-hook 'after-save-hook 'malabar-compile-file-silently
                  nil t)))


(defun my-java-malabar-mode-hook ()
  (define-key c-mode-base-map "\C-\M-g" 'malabar-jump-to-thing)
  (global-set-key "\M-n" 'semantic-ia-complete-symbol)
  (define-key c-mode-base-map "." 'semantic-complete-self-insert)
)

(add-hook 'c-mode-common-hook 'my-java-malabar-mode-hook)

#+END_SRC
#+BEGIN_SRC 

(setq semantic-default-submodes '(global-semantic-idle-scheduler-mode
                                  global-semanticdb-minor-mode
                                  global-semantic-idle-summary-mode
                                  global-semantic-mru-bookmark-mode))

(defun my-java-malabar-mode-hook ()
  (define-key c-mode-base-map "\C-\M-g" 'malabar-jump-to-thing)
  (global-set-key "\M-n" 'semantic-ia-complete-symbol)
  (define-key c-mode-base-map "." 'semantic-complete-self-insert)
)

(add-hook 'c-mode-common-hook 'my-java-malabar-mode-hook)


;; Compiling the file on save makes malabar display the errors in the
;; Java source code.
(add-hook 'malabar-mode-hook
          (lambda ()
            (add-hook 'after-save-hook 'malabar-compile-file-silently
                      nil t)))


(defun malabar-mode-bootstrap ()
  (require 'cedet)
  (require 'semantic)
  (load "semantic/loaddefs.el")
  (semantic-mode 1);;
  (add-to-list 'load-path "~/malabar-mode/src/main/lisp")
  (setq malabar-groovy-lib-dir "~/malabar-mode-jar/target/lib")
  (setq malabar-groovy-extra-classpath '("~/malabar-mode-jar/target/classes"))
  (require 'malabar-mode)
  (load "malabar-flycheck")
  (malabar-mode)
;;  (flycheck-mode)
)

(add-to-list 'auto-mode-alist '("\\.java\\'" . malabar-mode-bootstrap))

#+END_SRC


Display line number in Malabar and Java mode.

#+begin_src 
(add-hook 'malabar-mode-hook 'linum-mode)
(add-hook 'c-mode-common-hook 'linum-mode)
#+end_src

Use textmate mode with Malabar mode.

#+begin_src 
(require-package 'textmate)
(add-hook 'malabar-mode-hook 'textmate-mode)
(add-hook 'c-mode-common-hook 'textmate-mode)
#+end_src

Use auto-complete mode with Malabar mode.

#+begin_src
(add-hook 'malabar-mode-hook 'auto-complete-mode)
#+end_src

Display JavaDoc at point

#+begin_src 
(eval-after-load 'malabar-mode
                 '(define-key malabar-mode-map (kbd "C-x ?") 'malabar-show-javadoc))
#+end_src

Support for re-factoring under Malabar mode. These functions are
missing.

#+begin_src 
(defun c-forward-subword-internal ()
  (if (and
       (save-excursion
         (let ((case-fold-search nil))
           (re-search-forward
            (concat "\\W*\\(\\([" c-upper "]*\\W?\\)[" c-lower c-digit "]*\\)")
            nil t)))
       (> (match-end 0) (point))) ; So we don't get stuck at a
                                  ; "word-constituent" which isn't c-upper,
                                  ; c-lower or c-digit
      (goto-char
       (cond
        ((< 1 (- (match-end 2) (match-beginning 2)))
         (1- (match-end 2)))
        (t
         (match-end 0))))
    (forward-word 1)))

(defun c-forward-subword (&optional arg)
  "Do the same as `forward-word' but on subwords.
See the command `c-subword-mode' for a description of subwords.
Optional argument ARG is the same as for `forward-word'."
  (interactive "p")
  (unless arg (setq arg 1))
  (c-keep-region-active)
  (cond
   ((< 0 arg)
    (dotimes (i arg (point))
      (c-forward-subword-internal)))
   ((> 0 arg)
    (dotimes (i (- arg) (point))
      (c-backward-subword-internal)))
   (t
    (point))))

(defun subword-capitalize (arg)
  "Do the same as `capitalize-word' but on subwords.
See the command `c-subword-mode' for a description of subwords.
Optional argument ARG is the same as for `capitalize-word'."
  (interactive "p")
  (let ((count (abs arg))
        (direction (if (< 0 arg) 1 -1)))
    (dotimes (i count)
      (when (re-search-forward
             (concat "[" c-alpha "]")
             nil t)
        (goto-char (match-beginning 0)))
      (let* ((p (point))
             (pp (1+ p))
             (np (c-forward-subword direction)))
        (upcase-region p pp)
        (downcase-region pp np)
        (goto-char np)))))
#+end_src


* Project

使用Project新建项目非常简单，在项目根目录新建一个名为".projectile"空白文件，打开该项目下的任一文件即打开了该项目。

#+BEGIN_SRC emacs-lisp
(setq projectile-enable-caching nil)
#+END_SRC
* UI

#+BEGIN_SRC emacs-lisp
(setq sml/theme 'respectful)
(require-package 'smart-mode-line)
(sml/setup)
#+END_SRC
* [[https://github.com/redguardtoo/elpa-mirror][elpa-mirror]]

#+BEGIN_SRC
(require-package 'elpa-mirror)
#+END_SRC

* 数据库
** Mysql
#+BEGIN_SRC emacs-lisp
(require 'sql)
(require 'mysql)
(setq sql-product 'mysql)
(add-to-list 'auto-mode-alist '("\\.sql\\'" . sql-mode))
(add-to-list 'auto-mode-alist '("\\.SQL\\'" . sql-mode))

;;保存历史
(add-hook 'sql-interactive-mode-hook
         (lambda ()
           (setq sql-input-ring-file-name "~/sql_history")
           (setq comint-scroll-to-bottom-on-output t)
           (setq tab-width 4)
           (set (make-local-variable 'truncate-lines) t)

           ))
;;

(add-hook 'sql-mode-hook
         (lambda ()
           (setq tab-width 4)
           (setq indent-tabs-mode nil)
           ))

(setq sql-mysql-options '("-C" "-t" "-f" "-n"))

(setq sql-connection-alist
      '((pool-sone-dev
         (sql-product 'mysql)
         (sql-server "192.168.229.76")
         (sql-user "root")
         (sql-password "123456")
         (sql-database "sone")
         (sql-port 3306))
         (pool-ras-dev
         (sql-product 'mysql)
         (sql-server "192.168.229.76")
         (sql-user "root")
         (sql-password "123456")
         (sql-database "JDHR")
         (sql-port 3306))

        (pool-retail-dev
         (sql-product 'mysql)
         (sql-server "192.168.206.120")
         (sql-user "ipc")
         (sql-password "ipc")
         (sql-database "retail")
         (sql-port 3358))))

(defun sql-connect-preset (name)
  "Connect to a predefined SQL connection listed in `sql-connection-alist'"
  (eval `(let ,(cdr (assoc name sql-connection-alist))
           (flet ((sql-get-login (&rest what)))
             (sql-product-interactive sql-product)))))

(defun sql-pool-sone-dev ()
  (interactive)
  (sql-connect-preset 'pool-sone-dev))

(defun sql-pool-ras-dev ()
  (interactive)
  (sql-connect-preset 'pool-ras-dev))

(defun sql-pool-retail-dev ()
  (interactive)
  (sql-connect-preset 'pool-retail-dev))

(setq sql-send-terminator ";")

(eval-after-load "sql"
   '(load-library "sql-indent"))

(defgroup xdb-connect nil
  "interactiv db-sessions"
  :prefix "xdb-"
  :group 'local)

(defcustom xdb-mysql-sqli-file "~/ideas/mysql/mysqlSQL-log.sql"
  "Default SQLi file for mysql-sessions"
  :type 'string
  :group 'xdb-connect)

(setq global-mode-string
      (append global-mode-string
              '(" " cw-my-sql-str
                " "))
)


(defun cw-update-db-name(dbname  userName)
  (setq cw-my-sql-str (format "DB:%s" dbname))

)


(defun cw-mysql-sone-dev ()
  "connect to a mysql server with interactiv sql-Buffer"
  (interactive)
  (add-to-list 'auto-mode-alist '("\\.sql\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.SQL\\'" . sql-mode))
  (find-file-other-window xdb-mysql-sqli-file)
  (sql-pool-sone-dev)
  (other-window -1)
  (sql-set-sqli-buffer-generally)
  (cw-update-db-name "sone-dev" "")
)
(defun cw-mysql-ras-dev ()
  "connect to a mysql server with interactiv sql-Buffer"
  (interactive)
  (add-to-list 'auto-mode-alist '("\\.sql\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.SQL\\'" . sql-mode))
  (find-file-other-window xdb-mysql-sqli-file)
  (sql-pool-ras-dev)
  (other-window -1)
  (sql-set-sqli-buffer-generally)
  (cw-update-db-name "ras-dev" "")
)

(defun cw-mysql-retail-dev ()
  "connect to a mysql server with interactiv sql-Buffer"
  (interactive)
  (add-to-list 'auto-mode-alist '("\\.sql\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.SQL\\'" . sql-mode))
  (find-file-other-window xdb-mysql-sqli-file)
  (sql-pool-retail-dev)
  (other-window -1)
  (sql-set-sqli-buffer-generally)
  (cw-update-db-name "retail-dev" "")
)

#+END_SRC